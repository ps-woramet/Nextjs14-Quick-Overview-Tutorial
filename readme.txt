0. install project 

    npx create-next-app@latest
    √ What is your project named? nextjs14-quick-overview-tutorial
    √ Would you like to use TypeScript? No
    √ Would you like to use ESLint? No
    √ Would you like to use Tailwind CSS? Yes
    √ Would you like to use `src/` directory? No
    √ Would you like to use App Router? (recommended) Yes
    √ Would you like to customize the default import alias (@/*)? No

    run server : npm run dev

1. starter

    -globals.css

        @tailwind base;
        @tailwind components;
        @tailwind utilities;
    
    -page.js

        import Image from 'next/image'

        export default function Home() {
            return (
                <div>woramet</div>
            )
        }

2. creaet route

    -app > test > page.js
    // short cut sfc

        const testComponent = () => {
            return <div>this test page</div>;
        }
        
        export default testComponent;

3.  add header and footer

    -layout.js

        import { Inter } from 'next/font/google'
        import './globals.css'

        const inter = Inter({ subsets: ['latin'] })

        export const metadata = {
        title: 'Create Next App',
        description: 'Generated by create next app',
        }

        export default function RootLayout({ children }) {
        return (
            <html lang="en">
            <body className={inter.className}>
                <div>Header</div>
                    {children}
                <div>Footer</div>
                </body>  
            </html>
        )
        }

    -test > layout.js

        const testLayout = ({children}) => {
            return <section>
                <nav>
                    <div>test layout</div>
                    {children}
                </nav>
            </section>;
        }
        
        export default testLayout;

4. create route สำหรับรับ params

    -content > [slug] > [id] > page.js

        const ContentPage = ({params}) => {
            return <div>
                ContentPage
                slug: {params.slug}
                id: {params.id}
            </div>;
        }
        
        export default ContentPage;

5. create api get params

    -app > api > test > [id] > route.js

        export const GET = async(request, {params}) => {
            return Response.json({name: 'game', params: params.id});
        }

6. middle ทำการสร้าง middleware และ สร้าง path สำหรับ match

    -middleware.js

        import { NextResponse } from 'next/server'
 
        const middleware1 = async (request) => {
            const url = request.url
            console.log('middleware', {url});
            return NextResponse.next()
        }

        const middleware2 = async (request) => {
            const pathname = request.nextUrl
            console.log('middleware', {pathname});
            return NextResponse.next()
        }

        // This function can be marked `async` if using `await` inside
        export async function middleware(request) {
            await middleware1(request)
            await middleware2(request)
        
            // return NextResponse.redirect(new URL('/home', request.url))
            return NextResponse.next()
        }
        
        // See "Matching Paths" below to learn more
        export const config = {
            matcher: '/api/:path*',
        }

7. อธิบาย ssr (server-side rendering) vs csr (client-side rendering)

    -ssr (ทำการเรียกดึงข้อมูล js บน server ให้เสร็จแล้วส่งมา client) (nextjs)

        การสร้าง HTML และแสดงเนื้อหาเกิดขึ้นที่ฝั่งเซิร์ฟเวอร์. เมื่อผู้ใช้ทำการร้องขอหน้าเว็บ, เซิร์ฟเวอร์ทำการสร้าง HTML ที่มีข้อมูลเต็มไปด้วยและส่งกลับไปยังเบราว์เซอร์

        const express = require('express');
        const React = require('react');
        const ReactDOMServer = require('react-dom/server');
        const App = require('./App'); // ตัวอย่างเป็น React Component

        const server = express();

        server.get('/', (req, res) => {
        // ดึงข้อมูลที่ต้องการสร้าง HTML
        const data = fetchData();

        // สร้าง HTML พร้อม JavaScript และข้อมูลที่ต้องการ
        const html = ReactDOMServer.renderToString(
            <App initialData={data} />
        );

        // ส่ง HTML กลับไปยังเบราว์เซอร์
        res.send(`
            <html>
            <head>
                <!-- ส่วนอื่น ๆ ของ head -->
            </head>
            <body>
                <div id="app">${html}</div>
                <script>
                // นำข้อมูล JavaScript มาจาก server
                window.__INITIAL_DATA__ = ${JSON.stringify(data)};
                </script>
                <script src="/client.js"></script>
            </body>
            </html>
        `);
        });

        server.listen(3000, () => {
        console.log('Server is running on port 3000');
        });


    -csr (ทำการส่ง html มา client พร้อม script แล้ว client ทำการดึง js เอง) (reactjs)

        เซิร์ฟเวอร์ส่ง HTML พื้นฐานไปยังเบราว์เซอร์ และเบราว์เซอร์จะดึงข้อมูลและทำการแสดงเนื้อหาโดยใช้ JavaScript บนฝั่ง client

        const express = require('express');
        const React = require('react');
        const ReactDOMServer = require('react-dom/server');
        const App = require('./App'); // ตัวอย่างเป็น React Component

        const server = express();

        server.get('/', (req, res) => {
        // ส่ง HTML พื้นฐานไปยังเบราว์เซอร์
        const html = ReactDOMServer.renderToString(
            <div id="app"></div>
        );

        // ส่ง HTML พื้นฐานและ JavaScript ไปยังเบราว์เซอร์
        res.send(`
            <html>
            <head>
                <!-- ส่วนอื่น ๆ ของ head -->
            </head>
            <body>
                <div id="app">${html}</div>
                <script src="/client.js"></script>
            </body>
            </html>
        `);
        });

        server.listen(3000, () => {
        console.log('Server is running on port 3000');
        });

8. สร้าง route ใหม่เพื่อแสดงการดึงข้อมูลแบบ csr, ssr

    -app > api > csr > page.js

        'use client'

        import { useEffect, useState } from "react"

        async function getData(){
            const res = await fetch('https://jsonplaceholder.typicode.com/posts/1/comments')
            if(!res.ok){
                throw new Error('cannot fetch api')
            }
            return res.json()
        }

        const UserPage = () => {

            const [myData, setMyData] = useState([])

            const initData = async()=>{
                try{
                    const result = await getData()
                    setMyData(result)
                }catch(error){
                    console.log('error', error);
                }
            }

            useEffect(()=>{
                initData()
            }, [])

            console.log(myData);

            return (<div>
                {myData.map((data, index)=>(
                    <div key={index}>
                        {data.id} {data.email}
                    </div>
                ))}
                this is csr page
            </div>)
        }
        
        export default UserPage;

    -app > api > ssr > page.js

        async function getData(){
            const res = await fetch('https://jsonplaceholder.typicode.com/posts/1/comments')
            if(!res.ok){
                throw new Error('cannot fetch api')
            }
            return res.json()
        }

        const UserPage = async() => {

            const myData = await getData()
            myData.map((data, index)=>{
                console.log(data.id);
            })
            return (<div>
                {myData.map((data, index)=>(
                    <div key={index}>
                        {data.id} {data.email}
                    </div>
                ))}
                
                this is ssr page
            </div>);
        }
        
        export default UserPage;

9. การทำ loading ul and streaming เพื่อทำการ suspense

    -api > ssr > loading.js 

        const Loading = () => {
            return <div>Loading...</div>;
        }
        
        export default Loading;

